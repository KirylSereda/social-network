{"version":3,"sources":["Components/HOC/withAuthRedirect.jsx","Components/Diologs/Dialogs.module.css","Components/Diologs/Message/Message.jsx","Components/Diologs/DialogItem/DialogItem.jsx","Components/Diologs/Dialogs.jsx","Components/Diologs/DialogsContainer.jsx"],"names":["mapStateToPropsForReDirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","Message","className","s","dialog","message","DialogItem","path","id","active","companion","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","bodyStyle","btn","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messageElements","messages","m","dialogs_items","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"4LAGIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAQ7B,OADmCC,YAAQN,EAARM,EANT,SAACC,GACvB,OAAKA,EAAML,OACJ,cAACG,EAAD,eAAeE,IADI,cAAC,IAAD,CAAUC,GAAI,gB,oBCRhDC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,UAAY,6B,+HCM1MC,EAJC,SAACJ,GACb,OAAO,sBAAKK,UAAWC,IAAEC,OAAlB,cAA4BP,EAAMQ,Y,QCO9BC,EAPI,SAACT,GAChB,IAAIU,EAAO,YAAcV,EAAMW,GAC/B,OAAO,qBAAKN,UAAWC,IAAEC,OAAS,IAAMD,IAAEM,OAAnC,SACH,eAAC,IAAD,CAASP,UAAWC,IAAEO,UAAWZ,GAAIS,EAArC,UAA4CV,EAAMc,KAAlD,U,yCCgCFC,EAAYC,YAAiB,IAiB7BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAfL,SAAClB,GACpB,OACA,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAASX,GACpBD,KAAM,iBAAkBa,YAAa,yBAEzC,8BACI,wBAAQtB,UAAWuB,IAAUC,IAA7B,2BAQGC,EAhDC,SAAC9B,GAEb,IAAI+B,EACA/B,EAAMgC,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBH,GAAIwB,EAAExB,IAAZwB,EAAExB,OAEpEyB,EACApC,EAAMgC,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAS9B,QAAS8B,EAAE9B,SAAc8B,EAAE3B,OAM5E,OAAKX,EAAML,OAKP,sBAAKU,UAAWC,IAAE2B,QAAlB,UACI,qBAAK5B,UAAWC,IAAEiC,cAAlB,SACKR,IAEL,sBAAK1B,UAAWC,IAAE+B,SAAlB,UACI,8BAAMD,IACN,cAAEnB,EAAF,CAAsBG,SAfd,SAACoB,GACjBxC,EAAMyC,YAAYD,EAAOE,yBAIlB,cAAC,IAAD,CAAUzC,GAAI,YCHd0C,sBACX5C,aAfoB,SAACL,GACrB,MAAO,CACHsC,YAAatC,EAAMsC,gBAIA,SAACY,GACxB,MAAO,CACHH,YAAa,SAACC,GACdE,EAASC,YAAmBH,SAOhC7C,IAFW8C,CAGbb","file":"static/js/4.ee62f8eb.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForReDirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    const RedirectComponent = (props) => {\r\n        if (!props.isAuth) return <Redirect to={\"/login\"} />\r\n        return <Component {...props} />\r\n    } \r\n\r\n\r\n    let ConnectedAuthRedirectComponent=connect(mapStateToPropsForReDirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n\r\n  \r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3WAat\",\"dialogs_items\":\"Dialogs_dialogs_items__2AzQT\",\"active\":\"Dialogs_active__3wE5T\",\"messages\":\"Dialogs_messages__j_Sje\",\"message\":\"Dialogs_message__1DPNB\",\"companion\":\"Dialogs_companion__K5cjC\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}> {props.message}</div>;\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/Dialogs/\" + props.id;\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink className={s.companion} to={path}>{props.name} </NavLink>\r\n    </div>;\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport bodyStyle from './../../body.module.css'\r\nimport Message from './Message/Message';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements =\r\n        props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n    let messageElements =\r\n        props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) { \r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                < AddMessageFormRedux onSubmit={addNewMessage}  />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50=maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} \r\n            validate={[required,maxLength50]}\r\n            name={'newMessageBody'} placeholder={'enter your message'} />\r\n        </div>\r\n        <div>\r\n            <button className={bodyStyle.btn}> Send</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../HOC/withAuthRedirect';\r\nimport { sendMessageCreator} from '../Redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n        dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}